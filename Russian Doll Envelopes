import java.util.Arrays;

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        // Sort envelopes based on width in ascending order, and for the same width, sort by height in descending order.
        Arrays.sort(envelopes, (a, b) -> {
            if (a[0] == b[0]) {
                return Integer.compare(b[1], a[1]);
            } else {
                return Integer.compare(a[0], b[0]);
            }
        });

        int n = envelopes.length;
        int[] dp = new int[n];
        int result = 0;

        for (int i = 0; i < n; i++) {
            int index = binarySearch(dp, 0, result - 1, envelopes[i][1]);
            dp[index] = envelopes[i][1];
            if (index == result) {
                result++;
            }
        }

        return result;
    }

    private static int binarySearch(int[] dp, int low, int high, int key) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (dp[mid] == key) {
                return mid;
            } else if (dp[mid] < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}
